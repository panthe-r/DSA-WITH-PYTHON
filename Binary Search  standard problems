
# #here we are finding index of target
# def binarySearch(arr,x,si,ei):
#     if si > ei:
#         return -1
#     mid = (si + ei)//2
#     if arr[mid] == x:
#         return mid
#     elif arr[mid] > x:
#         return binarySearch(arr,x,si,mid-1)
#     else:
#         return binarySearch(arr,x,mid+1,ei)
# #
# #
# ar = [2,3,4]
# print(binarySearch(ar,3,0,2))


#todo using while loop , we will get index of target element = 'x'
# def binarySearch(a,x):
#     first = 0
#     last = len(a)-1
#     while first <= last:
#         mid = (first + last)//2
#         if x < a[mid]:
#             last = mid - 1
#         elif x > a[mid]:
#             first = mid + 1
#         else:
#             return mid
#
#     return -1
# #
# a = [2,3,4,5,11,12]
# print(binarySearch(a,3))


# TODO  cieling(equalorgreater)   and  flooring(equalorsmaller) using binary search fn from right above this just copy paste and
#   return  a[start] and a[end] for both to get answer
# def ceiling(a,x):
#     first = 0
#     last = len(a)-1
#     if x > a[last]:
#         return -1
#     while first <= last:
#         mid = (first + last)//2
#         if x < a[mid]:
#             last = mid - 1
#         elif x > a[mid]:
#             first = mid + 1
#         else:
#             return a[mid]
#
#     return a[first]
#
#
# a = [2,3,4,5,11,12]
# print(ceiling(a,7))


# def flooring(a,x):
#     first = 0
#     last = len(a)-1
#     if x < a[first]:
#         return -1
#     while first <= last:
#         mid = (first + last)//2
#         if x < a[mid]:
#             last = mid - 1
#         elif x > a[mid]:
#             first = mid + 1
#         else:
#             return a[mid]
#     return a[last]
#
#
# a = [2,3,4,5,11,12]
# print(flooring(a,10))



# def ceiling(a,x,si,ei):
#     mid = (si+ei)//2
#     if a[mid] == x:
#         print('ceiling = ', x)
#     if a[mid] < x <= a[mid+1]:
#         print('ceiling = ',a[mid+1])
#     elif a[mid] > x:
#         return ceiling(a,x,si,mid)
#     else:
#         return ceiling(a,x,mid+1,ei)
#     #
#     # if x <= a[si]:
#     #         print('ceiling = ',a[si])
#     # if x > a[si]:
#     #     print("ceiling doesn't exit of given ",x)
#
#
# a = [1,4,6,7,12,32,44]
# ceiling(a,40,0,len(a)-1)


# def smallestletter(letters,target)
#     first = 0
#     last = len(letters)-1
#     while first <= last:
#         mid = (first + last)//2
#         if target < letters[mid]:
#             last = mid - 1
#         else :
#             first = mid + 1
#     return letters[first%len(letters)]



# def firstoccurene(nums, target):
#     f = -1
#     first = 0
#     last = len(nums) - 1
#     while first <= last:
#         mid = (first + last)//2
#         if target < nums[mid]:
#             last = mid - 1
#         elif target > nums[mid]:
#             first = mid + 1
#         else:
#             if target == nums[mid]:
#                if nums[mid] != nums[mid - 1] or mid == 0:
#                    return mid
#                else:
#                     last = mid-1
#     return f
#
#
# def lastoccurence(nums, target):
#     l = -1
#     first = 0
#     last = len(nums) - 1
#     while first <= last:
#         mid = (first + last)//2
#         if target < nums[mid]:
#             last = mid - 1
#         elif target > nums[mid]:
#             first = mid + 1
#         else:
#             if target == nums[mid]:
#                 if  mid == len(nums)-1 or nums[mid] != nums[mid + 1]:
#                     return mid
#                 else:
#                     first = mid +1
#     return l
#
#
# a = [2,7,7,7,7,7,8,8,9]
# print(firstoccurene(a,4))
# print(lastoccurence(a,4))



# def infiniteSortedArray(a,x,):
#     start = 0
#     end = 1
#     while start <= end:
#         m = end + 1
#         end = 2*(end - start)
#         start = m
#     return binarysearch(a,x,start,end)
#
#
# def binarysearch(a,x,start,end):
#     while start <= end:
#         mid = (start + end)//2
#         if x < a[mid]:
#             end = mid - 1
#         elif x > a[mid]:
#             start = mid + 1
#         else:
#             return mid
#
#
# arr = [2,5,7,9,11,15,17,19,23,34,45,56,78,500]
# print(infiniteSortedArray(arr,78))
# # print(binarysearch(arr,78))


# Peak Index in a Mountain Array
# def peakIndexInMountainArray(arr):
#     first = 0
#     last = len(arr)-1
#     while first < last:
#         mid = (first + last)//2
#         if arr[mid] > arr[mid+1]:
#             last = mid
#         else:
#             first = mid+1
#     return first
#
# arr = [5,1,2]
# print(peakIndexInMountainArray(arr))


# def revBinarySearch(a,x):
#     start = 0
#     end=len(a)-1
#     while start <= end:
#         mid = (start + end)//2
#         if x < a[mid]:
#             start = mid + 1
#         elif x > a[mid]:
#             end = mid - 1
#         else:
#             return mid
#     return -1
#
# ar=[10]
# print(revBinarySearch(ar,2))



# # Find in mountain array #leetcode
# class Solution:
#     def findInMountainArray(self, target: int, mountain_arr: 'MountainArray') -> int:
#         first = 0
#         last = mountain_arr.length()-1
#         while first < last:
#             mid = (first + last)//2
#             if mountain_arr.get(mid) > mountain_arr.get(mid+1):
#                 last = mid
#             else:
#                 first = mid+1
#         a = first
#
#         start = 0
#         end = a
#         while start <= end:
#             mid = (start + end)//2
#             if target < mountain_arr.get(mid):
#                 end = mid - 1
#             elif target > mountain_arr.get(mid):
#                 start = mid + 1
#             else:
#                 return mid
#         begin = a%mountain_arr.length()
#         las = mountain_arr.length()-a
#         while begin <= las:
#             midd = (begin + las)//2
#             if target < mountain_arr.get(midd):
#                 begin = midd + 1
#             elif target > mountain_arr.get(midd):
#                 las = mid - 1
#             else:
#                 return midd
#         return -1


# def fn(nums, target):
#     first = 0
#     last = len(nums) - 1
#     while first < last:
#         mid = (first + last)//2
#         if nums[mid] > nums[mid + 1]:
#             last = mid
#         else:
#             first = mid+1
#     b = first
#
#     start = 0
#     end = b
#     while start <= end:
#         mid = (start + end)//2
#         if target < nums[mid]:
#             end = mid - 1
#         elif target > nums[mid]:
#             start = mid + 1
#         else:
#             return mid
#     begin = b%len(nums)
#     las = len(nums) - b
#     while begin <= las:
#         midd = (begin + las)//2
#         if target < nums[midd]:
#             begin = midd + 1
#         elif target > nums[midd]:
#             las = midd - 1
#         else:
#             return midd
#     return -1



# def pivot(arr):
#     first = 0
#     last = len(arr) - 1
#     while first < last:
#         mid = (first + last)//2
#         if arr[mid] > arr[mid]+1:
#             return mid
#         elif arr[mid]< arr[mid - 1]:
#             return mid -1
#         elif arr[first] >= arr[mid]:
#             last = mid-1
#         elif arr[first] < arr[mid]:
#             first = mid +1
#
#
#
# ar = [1,5,1,2]
# print(pivot(ar))



# Returns index of key in arr[l..h] if key is present,
# otherwise returns -1
# def search(arr,l,h,key):
#     if l > h:
#         return -1
#     mid = (l + h) // 2
#     if arr[mid] == key:
#         return mid
#     # If arr[l...mid] is sorted
#     if arr[l] <= arr[mid]:
#         # As this subarray is sorted, we can quickly
#         # check if key lies in half or other half
#         if key >= arr[l] and key <= arr[mid]:
#             return search(arr, l, mid-1, key)
#         return search(arr, mid + 1, h, key)
#     # If arr[l..mid] is not sorted, then arr[mid... r]
#     # must be sorted
#     if key >= arr[mid] and key <= arr[h]:
#         return search(arr, mid + 1, h, key)
#     return search(arr, l, mid-1, key)
