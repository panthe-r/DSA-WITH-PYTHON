Here are few problems related to algorithms in arrays like two pointer, dutch national flag, kadanes, sliding window



# Iterative python program to reverse an array #timecomplexity = O(n)

# Function to reverse A[] from start to end
# def reverseList(A, start, end):
#     while start < end:
#         A[start], A[end] = A[end], A[start]
#         start += 1
#         end -= 1

# reccursive way
#timecomplexity = O(n)
# def reverseList(arr,start,end):
#     if start >= end:
#         return
#     arr[start], arr[end] = arr[end], arr[start]
#     reverseList(arr,start+1,end-1)
#
#
# A = [1, 2, 3, 4, 5, 6]
# print(A)
# reverseList(A, 0, 5)
# print("Reversed list is",A)




# TODO  DUTCH NATIONAL FALG ALGORITHM (3 pointer PROBLEM) [RED|WHITE|BLUE]
# def sort012(arr,n):
#     low = 0
#     high = n-1
#     mid = 0
#     while mid <= high:
#         if arr[mid] == 0:
#             arr[mid], arr[low] = arr[low], arr[mid]
#             mid += 1
#             low += 1
#         elif arr[mid] == 1:
#             mid += 1
#         else:
#             arr[high], arr[mid] = arr[mid], arr[high]
#             high -= 1
#     return arr
#
#
# aray = [2, 0, 1, 1, 2, 0]
# print(sort012(aray,6))



# def move_zeros_to_end(arr):    #brute force O(n^2)
#     for i in range(len(arr)):
#         if arr[i] == 0:
#             for j in range(i+1,len(arr)):
#                 if arr[j] != 0:
#                     arr[i], arr[j] = arr[j], arr[i]
#     print(arr)
#
#
# a = [2,7,4,0,1,0,2,0,-4]
# move_zeros_to_end(a)


#TODO  Two Pointer Approach (for better time and space complexity)
# class array:
#     def move_zeros_to_end(self,arr):
#         j = 0
#         for i in range(len(arr)):
#             if arr[i] != 0:
#                 arr[i], arr[j] = arr[j], arr[i]
#                 j += 1
#         print(arr)
#
#
# a = [2,7,4,0,1,0,2,0,-4]
# arr = array()
# print(arr.move_zeros_to_end(a))





# arr = [-12, 11, -13, -5, 6, -7, 5, -3, -6]
# stri = []
# for i in arr:
#     if i < 0:
#         stri.append(str(i))
# for i in arr:
#     if i >= 0:
#         stri.append(str(i))
# print(" ".join(stri))



# def rearrange(arr, n):
#     j = 0
#     for i in range(0, n):
#         if arr[i] < 0:
#             arr[i], arr[j] = arr[j], arr[i]
#             j = j + 1
#     print(arr)
#
#
# arr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]
# n = len(arr)
# rearrange(arr, n)




# def getProductArrayExceptSelf(arr, n) :
#     count_zeroes = 0
#     count = 1
#     empty = []
#     for i in arr:
#         if i == 0:
#             count_zeroes += 1
#         else:
#             count *= i
#     for j in arr:
#         if count_zeroes == 0:
#             empty.append(count//j)
#         else:
#             if j == 0:
#                 empty.append(count)
#             else:
#                 empty.append(0)
#     return empty
#
# lst = [3,0,0]
# print(getProductArrayExceptSelf(lst,4))



# def twoSum(nums,target):
#     for i in range(len(nums)):
#         x = (target - nums[i])
#         for j in range(i+1, len(nums)):
#             if  nums[j]==x:
#                 return [i,j]


# nums = [3,2,4]
# print(binary_search(nums,3))
# print(twoSum(nums,6))





# def duplicate(a):
#     ans = 1
#     for i in range(len(a)):
#         ans = ans ^ a[i]
#     return ans
#         # for j in range(len(a)):
#         #     if i != j:
#         #         if a[i] == a[j]:
#         #             return a[i]
#
#
# arr = [2,3,4,5,6,1,5]
# print(duplicate(arr))




# Prefix sum
# def prefixSum(arr):
#     sum = 0
#     for i in range(len(arr)):
#         sum = sum+arr[i]
#         arr[i] = sum
#     return arr
#
#
# ar=[1,2,3,4]
# print(prefixSum(ar))



# suffixsum
# def suffixSum(arr):
#     sum = 0
#     for i in range(len(arr)-1,-1,-1):
#         sum = sum + arr[i]
#         arr[i] = sum
#     return arr
    # for i in range(len(arr)):
    #     sum = sum+arr[len(arr)-1-i]
    #     arr[len(arr)-i-1] = sum
    # return arr


# ar=[1,2,3,4]
# print(suffixSum(ar))



#Kadanes's Algorithm (max contigous subarray sum)
def maxSubArraySum(arr,N):
    ##Your code here
    s , max = 0 ,arr[0]
    for i in range(N):
        s += arr[i]
        if s > max :
            max = s
        if s < 0:
            s = 0
    return max




#todo rotate an array

# def rotate_one(arr,n):
#     temp = arr[0]
#     for i in range(1,n):
#         arr[i-1] = arr[i]
#     arr[n-1] = temp
#     return arr
#
# a = [1,3,4,5,6]
# print(rotate_one(a,5))


# def rotate_by_d(arr,n,d):  # O(n*d) time complexity , O(1) auxilary space
#     for i in range(d):
#         rotate_one(arr,n)
#     return arr
#
# a = [1,3,4,5,6]
# print(rotate_one(a,5))
# print(rotate_by_d(a,5,3))



# def reverse(arr, start, end):
#     while start < end:
#         arr[start], arr[end] = arr[end], arr[start]
#         start += 1
#         end -= 1
#



# def rotate(arr, k):
#     reverse(arr, 0, len(arr) - 1)
#     reverse(arr, 0, k - 1)
#     reverse(arr, k, len(arr) - 1)
#     return arr
#
#
# a = [1,2,3,4,5,6,7]
# print(rotate(a,3))




#todo sliding window

# def min_sum_subbarray(a,k):
#     n = len(a)
#     current_sum = 0
#     for i in range(k):
#         current_sum += a[i]
#     m_sum = current_sum
#     m_last_ind = k-1
#     for i in range(n):
#         current_sum += a[i]
#         current_sum -= a[i-k]
#         if current_sum < m_sum:
#             m_sum = current_sum
#             m_last_ind = i
#     # print(a[m_last_ind - k + 1:m_last_ind+1])
    # start = m_last_ind - k + 1
    # end = m_last_ind
    # for j in range(start,end+1):
    #     print(a[j], end=' ')

# a = [2,4,6,1,3,9,7]
# min_sum_subbarray(a,3)



# def count_elements_in_arr(arr, n):
#     s = set(arr)
#     return len(s)
#     # res = 1
#     # for i in range(1,n):
#     #     if arr[i] not in  arr[:i]:
#     #         res += 1
#     # return res
#
#
# arr = [10,20,20,20,10,20,30]
# print(count_elements_in_arr(arr,7))
