#todo understanding implementation of linked list
# class Node:
#     def __init__(self,data):
#         self.data = data
#         self.next = None


# a = Node(14)
# print(a)
# print(a.data)
# print(a.next)
#
# b = Node(15)
# print(b)
# print(b.data)
# print(b.next)
# print()
#
# a.next = b
# print(a)
#
# print(b)
# print(a.next)  # == b
# print(b.next)
# print(a.next.data)
# print(b.next.data)



#LinkedList Implementation Uing Arrays (ITERATIVELY)

# class Node:
#     def __init__(self,data):
#         self.data = data
#         self.next = None
# 
# 
# def printLL(head):
#     while head is not None:
#         print(str(head.data) + '->', end='')
#         head = head.next
#     print('None')
#     return
# 
# 
# def length(head):
#     count = 0
#     while head is not None:
#         count += 1
#         head = head.next
#     return count
# 
# 
# def insert_at_i(head,i,new_element):
#     if i < 0 or i > length(head):
#         return head
# 
#     prev = None
#     curr = head
#     count = 0
#     while count < i:
#         count += 1
#         prev = curr
#         curr = curr.next
#     newNode = Node(new_element)
#     if prev is not None:
#         prev.next = newNode
#     else:
#         head = newNode
#     newNode.next = curr
#     return head
# #
# #
# def delete_at_i(head,i):
#     if i < 0 or i >= length(head):
#         return head
# 
#     pre = None
#     cur = head
#     count = 0
#     while count < i:
#         count += 1
#         pre = cur
#         cur = cur.next
#     if pre is not None:
#         cur = cur.next
#         pre.next = cur
#     else:
#         head = cur.next
#     return head
# #
# #
# def takeInput():
#     inputList = [int(ele) for ele in input().split()]
#     head = None
#     tail = None
# 
#     for currentdata in inputList:
#         newNode = Node(currentdata)
#         if head is None:
#             head = newNode
#             tail = newNode
# 
#         else:
#             tail.next = newNode
#             tail = newNode
# 
#     return head
# 
# 
# h = takeInput()
# printLL(h)
# # print(length_recursive(h))
# # h = delete_at_i(h,2)
# # printLL(h)
# h = insert_at_i(h,2,110)
# printLL(h)
# h = insert_at_i(h,0,10)
# printLL(h)
# h = insert_at_i(h,8,1101)
# printLL(h)




#LinkedList Implementation Uing Arrays (RECURSIVELY)
# # todo recursively
#
# class Node:
#     def __init__(self,data):
#         self.data = data
#         self.next = None
#
#
# def printLL(head):
#     if head is None:
#         print('None')
#         return
#     print(str(head.data) + '->' ,end='')
#     printLL(head.next)
#
#
# def length_recursive(head):
#     if head is None:
#         return 0
#     x = length_recursive(head.next)
#     return x + 1
#
#
# def insert_recursively(head,i,value):  #O(i) time complexity
#     if i == 0:
#         newNode = Node(value)
#         newNode.next = head
#         return newNode
#
#     if head is None:
#         return None
#
#     smallhead = insert_recursively(head.next,i-1,value)
#     head.next = smallhead
#     return head
#
#
# def delete_recur(head,i):
#     if i == 0:
#         head = head.next
#         return head
#
#     if head is None:
#         return None
#
#     small_head = delete_recur(head.next,i-1)
#     head.next = small_head
#     return head
#
#
# def takeInput():
#     inputList = [int(ele) for ele in input().split()]
#     head = None
#     tail = None
#
#     for currentdata in inputList:
#         newNode = Node(currentdata)
#         if head is None:
#             head = newNode
#             tail = newNode
#
#         else:
#             tail.next = newNode
#             tail = newNode
#
#     return head

#

# h = takeInput()
# printLL(h)
# print(length_recursive(h))
# h = insert_recursively(h,1,20)
# # printLL(h)
# h = insert_recursively(h,0,210)
# printLL(h)
# print(length_recursive(h))
# h = delete_recur(h,1)
# printLL(h)

# head = delete_recur(h,0)
# printLL(head)

# head = delete_recur(h,4)
# printLL(head)
